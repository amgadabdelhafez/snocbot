<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_94469_snoc_bot.SessionManager</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>SessionManager</name>
        <script><![CDATA[var SessionManager = Class.create();
SessionManager.prototype = {
    initialize: function(vaConstants) {
		this.vaConstants = vaConstants;
    },
	
	/**
	 * Resets the parameter object within the Watson state obj
	 * - Used for Use case resetting
	 * @param {Obj} context
	 */
	resetParams: function(context) {
		context.sn.params = this.vaConstants.EMPTY_JSON_STR;
		delete context.sn.soft_reset;
	},
	
	/**
	 * Saves the state into the database
	 * @param {sys_id} groupProfileId 
	 * @param {Obj} state
	 * @return {Boolean} true if update was successful
	 */
	setConvState: function(groupProfileId, state) {
		var stateStr = JSON.stringify(state);

		if (!this._isValidJson(stateStr))
			return false;
		
		var gr = new GlideRecord(this.vaConstants.IBM_VA_CONV_CONTEXT);
		gr.addQuery(this.vaConstants.LIVE_GROUP_PROFILE, groupProfileId);
		gr.query();
		
		if (gr.next()) {
			gr.state = stateStr;
			gr.update();
		}
		else {
			gr.initialize();
			gr.live_group_profile = groupProfileId;
			gr.state = stateStr;
			gr.insert();
		}
		return true;
	},
	
	/**
	 * Called from the ConversationController to get the current state in the DB
	 * - If the state doesn't exist, it will initialize a new context
	 * @param {sys_id} groupProfileId
	 * @return {JSON Obj} state
	 */
	getConvState: function(groupProfileId, botId) {
		if (!groupProfileId)
			return null;
		
		var stateGr = this._getStateGr(groupProfileId);
		
		if (stateGr)
			return this._getStateContextObj(stateGr);
		else
			return this._initializeState(botId);
	},
	
	/**
	 * Internal GR getter
	 * @param {sys_id} groupProfileId
	 * @return {GlideRecord} conversation context GR
	 */
	_getStateGr: function(groupProfileId) {
		var gr = new GlideRecord(this.vaConstants.IBM_VA_CONV_CONTEXT);
		gr.addQuery(this.vaConstants.LIVE_GROUP_PROFILE, groupProfileId);
		gr.query();
	
		if (gr.next())
			return gr;
		else
			return null; 
	},
	
	/**
	 * Given a conv state GR, retrieve the state in the form of a JSON Obj
	 * @param {GlideRecord} stateGR
	 * @return {JSON Obj} state
	 */
	_getStateContextObj: function(stateGR) {
		var state = stateGR.getValue(this.vaConstants.STATE);
		if (!state || !this._isValidJson(state))
			return null;
		
		return JSON.parse(state);
	},
	
	/**
	 * Checks if the given input string is in a valid JSON format
	 * @param {String} json
	 * @return {Boolean} true - if valid
	 */
	_isValidJson: function(json) {
		try {
			JSON.parse(json);
			return true;
		}
		catch (e) {
			return false;
		}
	},
	
	/**
	 * Generates a new instance of Watson Context as a JSON Obj
	 * @return {JSON Obj} initialState
	 */
	_initializeState: function(botId) {
		var initialState = this.vaConstants.INITIAL_WATSON_CONTEXT_JSON_OBJ;
		
		// Set User Information
		var user = gs.getUser();
		if (user.user_name !== this.vaConstants.GUEST_USER_NAME) {
 			initialState.context.sn.user.first_name = user.getFirstName();
			initialState.context.sn.user.sys_id = user.getID();
		}
		
		var gr = new GlideRecord(this.vaConstants.SYS_USER);
        if (gr.get(botId)) {
            initialState.context.sn.bot.name = gr.getValue(this.vaConstants.FIRST_NAME);
            initialState.context.sn.bot.sys_id = gr.getValue(this.vaConstants.SYS_ID);
        }
		
		return initialState;
	},
	
	
    type: 'SessionManager'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-19 16:46:17</sys_created_on>
        <sys_id>e8fad2a3db821300c7aaaab35b961939</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>SessionManager</sys_name>
        <sys_package display_value="SNOC Bot" source="x_94469_snoc_bot">40119227db021300c7aaaab35b96196f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SNOC Bot">40119227db021300c7aaaab35b96196f</sys_scope>
        <sys_update_name>sys_script_include_e8fad2a3db821300c7aaaab35b961939</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-19 16:46:22</sys_updated_on>
    </sys_script_include>
</record_update>
